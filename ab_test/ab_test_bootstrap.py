# -*- coding: utf-8 -*-
"""SciBERT demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HUoQiRKgwlTfZv44ZT8vrJqtSY9B2sXE
"""

import numpy as np 
import pandas as pd 
from scipy.stats import norm

cookie_url = 'https://raw.githubusercontent.com/malinphy/datasets/main/ab_testing/cookie_cat/cookie_cats.csv'
df = pd.read_csv(cookie_url)

df.head(3)

print('gate types:',df['version'].unique())
print('retention types',df['retention_1'].unique())
print('retention types:',df['retention_7'].unique())

con1 = (df['version'] == 'gate_30')
con2 = (df['version'] == 'gate_30')
g30_r1_false = df[con1 & con2]['retention_1'].value_counts()[0]
g30_r1_true = df[con1 & con2]['retention_1'].value_counts()[1]
g30_r1_total = g30_r1_true+g30_r1_false

def value_counter(df, col1, col2):
    con1 = (df['version'] == col1)
    con2 = (df['version'] == col1)
    g30_r1_false = df[con1 & con2][col2].value_counts()[0]
    g30_r1_true = df[con1 & con2][col2].value_counts()[1]
    g30_r1_total = g30_r1_true+g30_r1_false

    return g30_r1_true,g30_r1_false,g30_r1_total

g30_r1_true,g30_r1_false,g30_r1_total = value_counter(df, 'gate_30', 'retention_1')
g40_r1_true,g40_r1_false,g40_r1_total = value_counter(df, 'gate_40', 'retention_1')

print(g30_r1_true,g30_r1_false,g30_r1_total)
print(g40_r1_true,g40_r1_false,g40_r1_total)

''' for simplicity, retention_1 will investigated first'''

alpha = 0.05

print(df.groupby(['version'])['retention_1'].count())
print(df.groupby(['version'])['retention_1'].sum())
print(df.groupby(['version'])['retention_1'].mean())

def boot_for_means(df, B,col):
    
    boot_mean_diff = []
    boot_mean_g30 = []
    boot_mean_g40 = []

    for i in range(B):
        df_boot = df.sample(frac = 1 , replace = True)

        x = df_boot.groupby(['version'])[col].mean()
        boot_mean_g30.append(x[0])
        boot_mean_g40.append(x[1])
        boot_mean_diff.append(x[1] - x[0])

    return boot_mean_diff, boot_mean_g30, boot_mean_g40

B = 10000
boot_mean_diff_r1, boot_mean_g30_r1, boot_mean_g40_r1 =  boot_for_means(df, B,'retention_1')
boot_mean_diff_r7, boot_mean_g30_r7, boot_mean_g40_r7 =  boot_for_means(df, B,'retention_7')

Z_mean_r1 = np.mean(boot_mean_g30_r1) - np.mean(boot_mean_g40_r1)
Z_sigma_r1 =np.sqrt((np.var(g40_r1_true)/g40_r1_total + np.var(g30_r1_true)/g30_r1_total))
CI = [Z_mean_r1 - norm.ppf(1-alpha/2)*Z_sigma_r1, Z_mean_r1 + norm.ppf(1-alpha/2)*Z_sigma_r1]
# print(df.info())
# print(df['userid'].nunique())

neg_boot_means = len(np.where(np.array(boot_mean_diff_r1) < 0))
p_value_diff_means = neg_boot_means/B

CI = np.percentile(boot_mean_diff_r1, [2.5, 97.5])

import matplotlib.pyplot as plt
counts,bins,ignored = plt.hist(boot_mean_diff_r1,50,density = True,color = 'purple')
plt.xlabel("mean difference")
plt.title("Distribution of Bootstrapped samples mean difference")
plt.show()

\

