# -*- coding: utf-8 -*-
"""SciBERT demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HUoQiRKgwlTfZv44ZT8vrJqtSY9B2sXE
"""

import numpy as np 
import pandas as pd 
from scipy.stats import t

n_con = 20
n_exp = 20
df_con = n_con - 1
df_exp = n_exp - 1

alpha = 0.5

X_con = np.random.standard_t(df_con, n_con)
X_exp = np.random.standard_t(df_exp, n_exp)

len(X_con)

mu_con = np.mean(X_con)
mu_exp = np.mean(X_exp)

var_con = np.var(X_con)
var_exp = np.var(X_exp)

se_con = np.sqrt(var_con)
se_exp = np.sqrt(var_exp)
pooled_var = (((n_con-1)*var_con + (n_exp-1)*var_exp) / (n_con+n_exp-2)) *((1/n_con)+(1/n_exp))
std_err = np.sqrt(pooled_var)
test_stat = (mu_con - mu_exp)/std_err

crit_value = t.ppf(1-alpha/2, n_con + n_exp - 2)

p_val = t.sf(test_stat, n_con + n_exp - 2)*2

margin_error = crit_value *std_err

CI = [(mu_con-mu_exp) - margin_error, (mu_con-mu_exp) + margin_error]

print("T-score: ", test_stat)
print("T-critical: ", crit_value)
print("P_value: ", p_val)
print("Confidence Interval of 2 sample Z-test: ", np.round(CI,2))

